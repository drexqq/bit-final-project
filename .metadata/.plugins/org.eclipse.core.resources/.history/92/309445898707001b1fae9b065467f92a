package com.example.demo.auth;

import java.util.ArrayList;
import java.util.Collection;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.example.demo.dto.MemberDto;

// 시큐리타가 /login 주소 요청이 오면 낚아채서 로그인을 진행시킨다
//로그인을 진해이 완료가 되면 시큐리티 session을 만들어줍니다( Security ContextHolder)
//오브젝트 타입 => Authentication 타입 객체
//Authentication 안에 User 정보가 있어야 됨.
// User오브젝트타입 => UserDetails 타입 객체

// Security Session => Authentication => UserDetails


public class PrincipalDetails implements UserDetails {
	
	String ID;

	private MemberDto mem; //콜포지션
	
	public PrincipalDetails( MemberDto mem ) {
		this.mem = mem;
	}
	
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		Collection<GrantedAuthority> collect = new ArrayList<>();
		collect.add(new GrantedAuthority() {
			
			@Override
			public String getAuthority() {
				System.out.println(mem.getRole());
				return mem.getRole();
			}
		});
		
		return collect;
	}

	@Override
	public String getPassword() {
		
		return mem.getPwd();
	}

	@Override
	public String getUsername() {
		
		return mem.getName();
	}

	@Override
	public boolean isAccountNonExpired() {
		
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		
		return true;
	}

	@Override
	public boolean isEnabled() {
		
		// 휴먼계정
		
		return true;
	}

	
	
	
}
