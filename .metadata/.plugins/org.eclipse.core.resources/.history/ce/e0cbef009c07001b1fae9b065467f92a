package demo.a.b.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		//http.csrf().disable();
		http.authorizeRequests()
		.antMatchers("/admin").access("hasRole('ROLE_ADMIN')")
		.antMatchers("/loginAf").access("hasAnyRole('ROLE_USER', 'ROLE_ADMIN')")
        .antMatchers("/hello").permitAll()
        .antMatchers("/loginform").permitAll()
        .antMatchers("/regi").permitAll()
        .anyRequest().authenticated()
        .and().logout().permitAll().logoutSuccessUrl("/loginform")
        .and().formLogin()
        .loginPage("/loginform")
        .loginProcessingUrl("/login")        
        .defaultSuccessUrl("/loginAf", true);    
	}
	
	@Bean
    public PasswordEncoder passwordEncoder() {

        return new BCryptPasswordEncoder();

    }

    @Bean
	@Override
	protected AuthenticationManager authenticationManager() throws Exception {
		
		return super.authenticationManager();
	}
    
   

}
